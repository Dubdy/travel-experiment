{
	"info": {
		"_postman_id": "2b85e609-5347-4509-94f6-93d60a2ed466",
		"name": "Traveller",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CORS",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "OPTIONS",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{SERVER}}ping",
					"host": [
						"{{SERVER}}ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}install",
					"host": [
						"{{SERVER}}install"
					]
				}
			},
			"response": []
		},
		{
			"name": "Demo",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}demo",
					"host": [
						"{{SERVER}}demo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Re-Install",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}reinstall",
					"host": [
						"{{SERVER}}reinstall"
					]
				}
			},
			"response": []
		},
		{
			"name": "Un-Install",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}uninstall",
					"host": [
						"{{SERVER}}uninstall"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth (BASIC)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a4fca42-18ee-49ac-bbe5-0fdca7102e0a",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has a token\"] = (jsonData[\"token\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"] > 543533823)",
							"",
							"postman.setEnvironmentVariable(\"AUTH_TOKEN\", jsonData[\"token\"]);",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0d43ff69-0ee0-44f2-b2f1-f0a273c92a0b",
						"type": "text/javascript",
						"exec": [
							"var authorize = 'var server = pm.environment.get(\"SERVER\");\\",
							"var token = pm.environment.get(\"AUTH_TOKEN\");\\",
							"pm.sendRequest({\\",
							"    url: server + \"token\",\\",
							"    method: \"GET\",\\",
							"    header: \"Authorization:Token \" + token\\",
							"}, function (err, response) {\\",
							"    console.log(response.headers);\\",
							"    if (response) {\\",
							"        var a = response.headers.get(\"authorization\").substring(7);\\",
							"        pm.environment.set(\"JWT_AUTH\", a);\\",
							"    }\\",
							"});';",
							"",
							"pm.environment.set(\"func:authorize\", authorize);"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@liveui.io",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}auth",
					"host": [
						"{{SERVER}}auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb96d006-ff14-4369-ab66-b908f5816ac3",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has a token\"] = (jsonData[\"token\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"].length > 10)",
							"",
							"postman.setEnvironmentVariable(\"AUTH_TOKEN\", jsonData[\"token\"]);",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bfe6c598-e7ad-4ae4-b73b-7aa7e15e77b5",
						"type": "text/javascript",
						"exec": [
							"var authorize = 'var server = pm.environment.get(\"SERVER\");\\",
							"var token = pm.environment.get(\"AUTH_TOKEN\");\\",
							"pm.sendRequest({\\",
							"    url: server + \"token\",\\",
							"    method: \"GET\",\\",
							"    header: \"Authorization:Token \" + token\\",
							"}, function (err, response) {\\",
							"    console.log(response.headers);\\",
							"    if (response) {\\",
							"        var a = response.headers.get(\"authorization\").substring(7);\\",
							"        pm.environment.set(\"JWT_AUTH\", a);\\",
							"    }\\",
							"});';",
							"",
							"pm.environment.set(\"func:authorize\", authorize);"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"admin\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}auth",
					"host": [
						"{{SERVER}}auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "JWT refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c9fe589-fee6-417f-9105-96a38bbe8b6e",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"] > 543533823)",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "90616aa4-124c-423d-bf50-1cdbe31f8fe6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{AUTH_TOKEN}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@liveui.io\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}token",
					"host": [
						"{{SERVER}}token"
					]
				}
			},
			"response": []
		},
		{
			"name": "JWT refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1512bc88-43bb-4ec2-a819-b0872e3cae15",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"// Token check",
							"tests[\"Token has an id\"] = (jsonData[\"id\"].length > 10)",
							"tests[\"Token has a user_id\"] = (jsonData[\"user\"][\"id\"].length > 10)",
							"tests[\"Token has expires\"] = (jsonData[\"expires\"] > 543533823)",
							"",
							"// JWT",
							"var jwtAuthExists = responseHeaders.hasOwnProperty(\"Authorization\") || responseHeaders.hasOwnProperty(\"authorization\");",
							"tests[\"JWT Token is present\"] = jwtAuthExists;",
							"",
							"if (jwtAuthExists) {",
							"    var a = responseHeaders[\"Authorization\"] || responseHeaders[\"authorization\"];",
							"    tests[\"JWT token has a bearer\"] = a.has(\"Bearer \");",
							"    tests[\"JWT token has a value\"] = (a.length > 15);",
							"    postman.setEnvironmentVariable(\"JWT_AUTH\", a.substring(7));",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"token\": \"{{AUTH_TOKEN}}\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}token",
					"host": [
						"{{SERVER}}token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "116dcf70-2c69-453a-a623-ab4762e9962b",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams",
					"host": [
						"{{SERVER}}teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "50c4544a-37b5-4294-9dbe-c06e3fe7e21b",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"",
							"if (responseCode.code === 201) {",
							"    // Token check",
							"    tests[\"Team has an id\"] = (jsonData[\"id\"].length > 0)",
							"    tests[\"Team has an name\"] = (jsonData[\"name\"].length > 0)",
							"    tests[\"Team has an identifier\"] = (jsonData[\"identifier\"].length > 0)",
							"    ",
							"    postman.setEnvironmentVariable(\"TEST_TEAM_ID\", jsonData[\"id\"]);",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "56d344a5-51cb-4ee9-8641-250a8cfc94dd",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin Yo!\",\n    \"identifier\": \"admin-yo\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams",
					"host": [
						"{{SERVER}}teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/check)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dec41314-4b28-4144-b0ff-84ece146d04d",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"identifier\": \"admin\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/check",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81cd4170-4a0e-4db5-90b4-fd3cf82170a1",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"if (responseCode.code === 200) {",
							"    // Token check",
							"    tests[\"Team has an id\"] = (jsonData[\"id\"].length > 0)",
							"    tests[\"Team has an name\"] = (jsonData[\"name\"].length > 0)",
							"    tests[\"Team has an identifier\"] = (jsonData[\"identifier\"].length > 0)",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "19a1abfc-56ea-4447-8d56-05b2b7906765",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/link)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bacdfa30-78f2-4948-86d6-9eee95a80e1f",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{TEST_USER_ID}}\",\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/link",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"link"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/unlink)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d01d357f-0e41-41de-8bf0-49ff320a6c93",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{TEST_USER_ID}}\",\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/unlink",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"unlink"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/users)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9755c07f-4230-4701-a491-d2b7c1aa5370",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/users",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "16192de3-a019-427d-8562-ddf0bb2baec4",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc69f392-b674-49ed-aad7-1d6f885713a8",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/config)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "600477c9-54af-41a9-8258-5bcdc511e5a2",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"if (responseCode.code === 200) {",
							"    tests[\"Config has a team_id\"] = (jsonData[\"team_id\"].length > 0)",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "97f737f8-dcd1-41b6-8577-1d136c72ef2d",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Admin\",\n    \"identifier\": \"admin5\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/config",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams (teams/:id/config)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a72c6134-9233-4932-8191-c9eacbd1659f",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"if (responseCode.code === 200) {",
							"    tests[\"Config has a team_id\"] = (jsonData[\"team_id\"].length > 0)",
							"}",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "19a1abfc-56ea-4447-8d56-05b2b7906765",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"theme\": {\n        \"primary_color\": \"000000\",\n        \"primary_background_color\": \"FFFFFF\",\n        \"primary_button_color\": \"FFFFFF\",\n        \"primary_button_background_color\": \"E94F92\"\n    },\n    \"apps\": {\n    \t\"ios\": \"https://itunes.apple.com/gb/app/rekola/id888759232?mt=8\",\n    \t\"android\": \"https://play.google.com/store/apps/details?id=cz.rekola.app\"\n    }\n}\t"
				},
				"url": {
					"raw": "{{SERVER}}teams/{{TEST_TEAM_ID}}/config",
					"host": [
						"{{SERVER}}teams"
					],
					"path": [
						"{{TEST_TEAM_ID}}",
						"config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users (users)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2b3a94fc-0f44-4971-8556-8632f530e47e",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{SERVER}}users",
					"host": [
						"{{SERVER}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users (users/global)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "692d2e1a-e43e-4587-b518-85fbe7ec8598",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}users/global?search=ad",
					"host": [
						"{{SERVER}}users"
					],
					"path": [
						"global"
					],
					"query": [
						{
							"key": "search",
							"value": "ad"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users (users)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "245c9eb5-1349-4660-8e3f-8a2e2ece34a5",
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get(\"func:authorize\"));"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{JWT_AUTH}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"email\": \"rafaj@mangoweb.cz\",\n        \"username\": \"rafiki270\",\n        \"lastname\": \"Ondrej\",\n        \"firstname\": \"Rafaj\",\n        \"password\": \"aaaaaa\"\n    }"
				},
				"url": {
					"raw": "{{SERVER}}users",
					"host": [
						"{{SERVER}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unknown URL",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}unknown",
					"host": [
						"{{SERVER}}unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Database info",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}tables",
					"host": [
						"{{SERVER}}tables"
					]
				}
			},
			"response": []
		},
		{
			"name": "Settings (settings)",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}settings",
					"host": [
						"{{SERVER}}settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Settings (settings?plain)",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}settings?plain=true",
					"host": [
						"{{SERVER}}settings"
					],
					"query": [
						{
							"key": "plain",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Settings (settings)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5091550-b98b-464b-bb6f-abfc9a340a46",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Status code",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"",
							"// Token check",
							"tests[\"Key has an id\"] = (jsonData[\"id\"].length > 0)",
							"tests[\"Key has an name\"] = (jsonData[\"name\"].length > 0)",
							"tests[\"Key has a token\"] = (jsonData[\"config\"].length > 0)",
							"",
							"postman.setEnvironmentVariable(\"TEST_SETTING_ID\", jsonData[\"id\"]);",
							"",
							"",
							"// Content type",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"tests[\"Content-Type is correct\"] = (postman.getResponseHeader(\"Content-Type\") == \"application/json; charset=utf-8\");"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"test_url2\",\n\t\"config\": \"https://www.boostappstore.com\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}settings",
					"host": [
						"{{SERVER}}settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Settings (settings/:id)",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"test_url3\",\n\t\"config\": \"https://www.boostappstore.com :)\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}settings/{{TEST_SETTING_ID}}",
					"host": [
						"{{SERVER}}settings"
					],
					"path": [
						"{{TEST_SETTING_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Settings (settings/:id)",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"test_url3\",\n\t\"config\": \"https://www.boostappstore.com :)\"\n}"
				},
				"url": {
					"raw": "{{SERVER}}settings/{{TEST_SETTING_ID}}",
					"host": [
						"{{SERVER}}settings"
					],
					"path": [
						"{{TEST_SETTING_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teapot",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}teapot",
					"host": [
						"{{SERVER}}teapot"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ping",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}ping",
					"host": [
						"{{SERVER}}ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Errors",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}errors",
					"host": [
						"{{SERVER}}errors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Info",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{JWT_AUTH}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{SERVER}}info",
					"host": [
						"{{SERVER}}info"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JWT_AUTH}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bd8a2c58-ab40-4e1d-8335-cca3a3a32c6d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ce39d7b5-21e6-4183-ae88-4c99099551b3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}